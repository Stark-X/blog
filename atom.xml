<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stark-X&#39;s Blog</title>
  
  <subtitle>Beneath this blog there is an idea</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://stark-x.github.io/"/>
  <updated>2018-08-02T10:12:54.428Z</updated>
  <id>https://stark-x.github.io/</id>
  
  <author>
    <name>Stark-X</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 kolla-ansible 部署 OpenStack</title>
    <link href="https://stark-x.github.io/2018/08/01/Use-kolla-ansible-deploy-OpenStack/"/>
    <id>https://stark-x.github.io/2018/08/01/Use-kolla-ansible-deploy-OpenStack/</id>
    <published>2018-08-01T02:46:54.000Z</published>
    <updated>2018-08-02T10:12:54.428Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>kolla-ansible</code>部署”all-in-one” OpenStack Queens<br><!-- toc --><br><!-- Description to show on index here  --></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>此教程在MacOS上完成，在开始前请预留8Gb内存，30G的磁盘空间，因为要下载相关资源文件，最好搭好梯子。</p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li><a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">VirtualBox</a></li><li><a href="https://www.vagrantup.com/" target="_blank" rel="noopener">Vagrant</a></li></ul><p>MacOS上强烈推荐使用<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">Homebrew</a>, 然后使用命令<code>brew tap caskroom/cask</code>安装cask，安装完毕之后，安装上述两个Application只需要使用<code>brew cask install virtualbox vagrant</code>即可快速完成解压、安装等一系列人手操作。</p><a id="more"></a><h1 id="下载Vagrantfile并启动"><a href="#下载Vagrantfile并启动" class="headerlink" title="下载Vagrantfile并启动"></a>下载Vagrantfile并启动</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">mkdir -p workspace/learning/openstack</span><br><span class="line"><span class="built_in">cd</span> workspace/learning/openstack</span><br><span class="line">curl -sS https://gist.github.com/Stark-X/d1e7ce4b8fcd2ea775249978237939f1</span><br><span class="line">time vagrant up</span><br></pre></td></tr></table></figure><p>Vagrantfile使用了CentOS 7 作为VM的image，还包含了一些初始化操作，如安装docker，花费时间视主机性能、网络而定。<br><small>* <em>作为参考，笔者使用的15版MBP(2.2Ghz i7 cpu, 16Gb mem, macOS High Sierra v10.13.6)，已有CentOS镜像缓存的情况下，用了10分钟。</em></small></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="global-yml"><a href="#global-yml" class="headerlink" title="global.yml"></a>global.yml</h2><p>位置：/etc/kolla/global.yml<br>这个文件是kolla-ansible部署的关键配置文件，网络、组件开启关闭等所有的配置都由此文件决定。<br>以下几个配置只是其中一部分，OpenStack还有更多的参数可以改变，具体查看官方文档。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valid options are ['centos', 'debian', 'oraclelinux', 'rhel', 'ubuntu']</span></span><br><span class="line"><span class="attr">kolla_base_distro:</span> <span class="string">"centos"</span></span><br><span class="line"><span class="comment"># Valid options are [ binary, source ]</span></span><br><span class="line"><span class="attr">kolla_install_type:</span> <span class="string">"source"</span></span><br><span class="line"><span class="comment"># Valid option is Docker repository tag</span></span><br><span class="line"><span class="attr">openstack_release:</span> <span class="string">"queens"</span></span><br><span class="line"><span class="attr">enable_ha_proxy:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">network_interface:</span> <span class="string">eth0</span></span><br><span class="line"><span class="attr">network_external_interface:</span> <span class="string">eth1</span></span><br><span class="line"><span class="attr">kolla_internal_vip_address:</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.15</span></span><br></pre></td></tr></table></figure></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="部署前检查"><a href="#部署前检查" class="headerlink" title="部署前检查"></a>部署前检查</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启调试模式的输出回显，便于查看日志</span></span><br><span class="line"><span class="comment"># ref: https://github.com/ansible/ansible/issues/27078</span></span><br><span class="line"><span class="built_in">export</span> ANSIBLE_STDOUT_CALLBACK=debug</span><br><span class="line">sudo kolla-ansible prechecks -i all-in-one</span><br></pre></td></tr></table></figure><p>这个步骤会检查配置文件设置是否可用，实际上是底层调用了ansible-playbook执行了一系列的操作。</p><h3 id="可能会遇到的问题："><a href="#可能会遇到的问题：" class="headerlink" title="可能会遇到的问题："></a>可能会遇到的问题：</h3><h4 id="Error-Hostname-has-to-resolve-to-IP-address-of-api-interface"><a href="#Error-Hostname-has-to-resolve-to-IP-address-of-api-interface" class="headerlink" title="Error: Hostname has to resolve to IP address of api_interface"></a>Error: Hostname has to resolve to IP address of api_interface</h4><p>检查/etc/hosts文件里面的主机名是否为127.0.0.1，更新”kolla_internal_vip_address”在global.yml文件里的值。</p><h4 id="TASK-haproxy-Checking-if-kolla-internal-vip-address-and-kolla-external-vip-address-are-not-pingable-from-any-node-failed"><a href="#TASK-haproxy-Checking-if-kolla-internal-vip-address-and-kolla-external-vip-address-are-not-pingable-from-any-node-failed" class="headerlink" title="TASK [haproxy : Checking if kolla_internal_vip_address and kolla_external_vip_address are not pingable from any node] failed"></a>TASK [haproxy : Checking if kolla_internal_vip_address and kolla_external_vip_address are not pingable from any node] failed</h4><p>因为部署为”all_in_one”，不需要<code>ha_proxy</code>，编辑global.yml，去掉”enable_haproxy”的注释，并把值改为”no”</p><h2 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kolla-ansible deploy -i all-in-one</span><br></pre></td></tr></table></figure><p>部署时间与网络状况挂钩，global.yml中<code>enable_*</code>为yes的组件越多，时间越长，另外，第一次部署会拉取需要的Docker镜像，可自行架设私有镜像仓库，更改docker配置使用私有镜像仓库，加快部署速度。</p><h2 id="生成命令行控制文件"><a href="#生成命令行控制文件" class="headerlink" title="生成命令行控制文件"></a>生成命令行控制文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo kolla-ansible post-deploy -i all-in-one</span><br><span class="line"><span class="comment"># 加载环境信息</span></span><br><span class="line">. /etc/kolla/admin-openrc.sh</span><br></pre></td></tr></table></figure><p>执行完毕后，/etc/kolla/admin-openrc.sh 会被生成，使用<code>cat</code>命令可以查看到其中的环境信息，这些信息会被openstack client用于操作OpenStack。</p><h1 id="Have-fun"><a href="#Have-fun" class="headerlink" title="Have fun"></a>Have fun</h1><h2 id="初始化demo环境"><a href="#初始化demo环境" class="headerlink" title="初始化demo环境"></a>初始化demo环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟网络，创建flavor，上传模板等</span></span><br><span class="line">bash /usr/share/kolla-ansible/init-runonce</span><br></pre></td></tr></table></figure><p>执行完毕后，提示用以下命令创建一个demo实例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">openstack server create \\</span><br><span class="line">    --image *** \\</span><br><span class="line">    --flavor m1.tiny \\</span><br><span class="line">    --key-name mykey \\</span><br><span class="line">    --nic net-id=*** \\</span><br><span class="line">    demo1</span><br></pre></td></tr></table></figure></p><p>创建完毕后，执行<code>openstack console url show demo1</code>查看在线控制台的URL，可通过noVNC连接到实例的shell。<br><small>*<em>在virtualbox设置nat端口映射</em></small><br>或者在虚拟机内执行命令<code>sudo ip netns exec [NAME] ssh cirros@&lt;ip&gt;</code>切换network namespace，ssh到目标实例。</p><h2 id="登录Admin"><a href="#登录Admin" class="headerlink" title="登录Admin"></a>登录Admin</h2><h3 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a>获取密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep keystone_admin_password /etc/kolla/passwords.yml</span><br></pre></td></tr></table></figure><h3 id="登录Admin-1"><a href="#登录Admin-1" class="headerlink" title="登录Admin"></a>登录Admin</h3><p>Url: <a href="http://localhost:8888/auth/login/" target="_blank" rel="noopener">http://localhost:8888/auth/login/</a><br>User: admin<br>Password: ***<br><small>*<em>在virtualbox设置nat端口映射</em></small></p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="修正错误的配置"><a href="#修正错误的配置" class="headerlink" title="修正错误的配置"></a>修正错误的配置</h2><p>若发现配置错误，需要重新部署，可选择使用以下工具清理环境。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bash /usr/share/kolla-ansible/tools/stop-containers</span><br><span class="line">bash /usr/share/kolla-ansible/tools/cleanup-containers</span><br><span class="line">bash /usr/share/kolla-ansible/tools/cleanup-host</span><br><span class="line">bash /usr/share/kolla-ansible/tools/cleanup-images</span><br><span class="line"><span class="comment"># Or</span></span><br><span class="line">sudo  kolla-ansible destroy -i all-in-one --yes-i-really-really-mean-it &amp;&amp; kolla-ansible deploy -i all-in-one</span><br></pre></td></tr></table></figure></p><h2 id="设定的IP无法访问"><a href="#设定的IP无法访问" class="headerlink" title="设定的IP无法访问"></a>设定的IP无法访问</h2><p>原本宿主机、虚拟机之间可通过192.168.56.101通讯，部署完成后，无法继续通讯了，这是因为Neutron接管了网络，放置到了不同的namespace，可通过<code>ip netns</code>看到两个新的network namespace，使用命令<code>ip netns exec [NAME] ping &lt;ip&gt;</code>验证。</p><h2 id="OpenStack-Client相关命令"><a href="#OpenStack-Client相关命令" class="headerlink" title="OpenStack Client相关命令"></a>OpenStack Client相关命令</h2><p>以下列出部分OpenStack client的命令，可使用<code>openstack [command] help</code>查看相关的帮助信息。</p><ul><li>openstack flavor list</li><li>openstack server list</li><li>openstack server show [SERVER_NAME]</li><li>… </li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>[使用Kolla-Ansible在CentOS 7单节点上部署OpenStack Pike] <a href="https://blog.csdn.net/yan7895566/article/details/79645774" target="_blank" rel="noopener">https://blog.csdn.net/yan7895566/article/details/79645774</a></li><li>[利用kolla快速搭建openstack-ocata单节点] <a href="https://www.lijiawang.org/posts/kolla-openstack-ocata.html" target="_blank" rel="noopener">https://www.lijiawang.org/posts/kolla-openstack-ocata.html</a></li><li>[CentOS7单节点部署OpenStack-Pike(使用kolla-ansible)] <a href="https://blog.csdn.net/persistvonyao/article/details/80229602#5deploy%E6%97%B6%E6%8A%A5%E9%94%99-please-enable-at-least-one-backend-when-enabling-cinder" target="_blank" rel="noopener">https://blog.csdn.net/persistvonyao/article/details/80229602#5deploy%E6%97%B6%E6%8A%A5%E9%94%99-please-enable-at-least-one-backend-when-enabling-cinder</a></li><li>[使用kolla快速部署openstack all-in-one环境] <a href="https://www.sunmite.com/openstack/use-kolla-deploy-openstack-all-in-one.html" target="_blank" rel="noopener">https://www.sunmite.com/openstack/use-kolla-deploy-openstack-all-in-one.html</a></li><li>[kolla-ansible Quick Start] <a href="https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html" target="_blank" rel="noopener">https://docs.openstack.org/kolla-ansible/latest/user/quickstart.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用&lt;code&gt;kolla-ansible&lt;/code&gt;部署”all-in-one” OpenStack Queens&lt;br&gt;&lt;!-- toc --&gt;&lt;br&gt;&lt;!-- Description to show on index here  --&gt;&lt;/p&gt;
&lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;p&gt;此教程在MacOS上完成，在开始前请预留8Gb内存，30G的磁盘空间，因为要下载相关资源文件，最好搭好梯子。&lt;/p&gt;
&lt;h2 id=&quot;安装环境&quot;&gt;&lt;a href=&quot;#安装环境&quot; class=&quot;headerlink&quot; title=&quot;安装环境&quot;&gt;&lt;/a&gt;安装环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vagrantup.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MacOS上强烈推荐使用&lt;a href=&quot;https://brew.sh/index_zh-cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Homebrew&lt;/a&gt;, 然后使用命令&lt;code&gt;brew tap caskroom/cask&lt;/code&gt;安装cask，安装完毕之后，安装上述两个Application只需要使用&lt;code&gt;brew cask install virtualbox vagrant&lt;/code&gt;即可快速完成解压、安装等一系列人手操作。&lt;/p&gt;
    
    </summary>
    
      <category term="OpenStack" scheme="https://stark-x.github.io/categories/OpenStack/"/>
    
    
      <category term="Cloud" scheme="https://stark-x.github.io/tags/Cloud/"/>
    
      <category term="OpenStack" scheme="https://stark-x.github.io/tags/OpenStack/"/>
    
      <category term="Ops" scheme="https://stark-x.github.io/tags/Ops/"/>
    
  </entry>
  
  <entry>
    <title>Hello Blog</title>
    <link href="https://stark-x.github.io/2017/09/18/hello-blog/"/>
    <id>https://stark-x.github.io/2017/09/18/hello-blog/</id>
    <published>2017-09-18T13:37:37.000Z</published>
    <updated>2018-07-15T11:01:22.275Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><!-- Description to show on index here  --><h2 id="第一篇Post"><a href="#第一篇Post" class="headerlink" title="第一篇Post"></a>第一篇Post</h2><p>接下来我会不定期在此博客更新各种技术类文章，预计会先写关于此博客的搭建流程，之后关于文本编辑器<code>VIM</code>的教程。</p><h3 id="本博客地址"><a href="#本博客地址" class="headerlink" title="本博客地址"></a>本博客地址</h3><ul><li>GitHub Page：<a href="https://stark-x.github.io/">https://stark-x.github.io/</a></li></ul><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;!-- Description to show on index here  --&gt;
&lt;h2 id=&quot;第一篇Post&quot;&gt;&lt;a href=&quot;#第一篇Post&quot; class=&quot;headerlink&quot; title=&quot;第一篇Post&quot;&gt;&lt;/a&gt;第一篇Post&lt;/h2&gt;&lt;p&gt;接下来我会不定期在此博客更新各种技术类文章，预计会先写关于此博客的搭建流程，之后关于文本编辑器&lt;code&gt;VIM&lt;/code&gt;的教程。&lt;/p&gt;
&lt;h3 id=&quot;本博客地址&quot;&gt;&lt;a href=&quot;#本博客地址&quot; class=&quot;headerlink&quot; title=&quot;本博客地址&quot;&gt;&lt;/a&gt;本博客地址&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;GitHub Page：&lt;a href=&quot;https://stark-x.github.io/&quot;&gt;https://stark-x.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="common" scheme="https://stark-x.github.io/tags/common/"/>
    
  </entry>
  
</feed>
